SUBQUERIES
Note: Codes are written for PostgreSQL environment
Prerequisite knowledge: JOINS, AGGREGATE FUNCTIONS, CONDITIONALS, LOGICALS, GROUP BY, WHERE, HAVING, DATE FUNCTIONS, CASE STATEMENTS etc
There are many reasons for using a subquery.
•	Double aggregation
•	Improving query integrity
•	Filtering using a dynamic list
•	To mention but a few
What is a sub-query? A sub-query is a query that returns an anticipated outcome. This outcome can be used at any point in another query (main or outer) query to give us an outcome. It either returns a table, a set of values or a single value.

For a very basic understanding

SELECT *
FROM orders
WHERE account_id = 1001

The above query returns the rows of orders made by account with id ‘1001’
But, 1001 is the minimum account_id, the query below proves that

SELECT MIN(account_id) AS "minimum order"
FROM orders

Let’s combine the two query above.

SELECT *
FROM orders
WHERE account_id = (SELECT MIN(account_id)
					FROM orders)
I have achieved the same result. Why? 
1.	SQL runs sub-query first
2.	The result of the sub-query is basis for the outer query


Quiz 1

Use the test environment below to find the number of events that occur for each day for each channel

SELECT DATE_TRUNC('day', occurred_at), channel, COUNT(*) c
FROM web_events
GROUP BY 1,2

Now create a sub query that simply provides all of the data from your first query

SELECT *
FROM (SELECT DATE_TRUNC('day', occurred_at), channel, COUNT(*) c
	FROM web_events
	GROUP BY 1,2) sub

Now find the average number of events for each channel. Since you broke out by day earlier. This is giving you an average per day

select channel, AVG(c) as avg_event_count
FROM (SELECT DATE_TRUNC('day', occurred_at), channel, COUNT(*) c
	FROM web_events
	GROUP BY 1,2) sub
GROUP BY 1
ORDER BY 2 DESC


Experience 1: 
Find the average channel number of events for each channel per day.


SELECT * 
FROM web_events

--The date would not allow grouping per day, we we need to date_trunc

SELECT DATE_TRUNC ('day', occurred_at) AS "day of use", channel
FROM web_events

/*Having formatted the date correctly, your next question should be. 
How do I get how many times each channel got used in a day?*/

SELECT DATE_TRUNC ('day', occurred_at) AS "day of use", channel, COUNT(channel) "count of use"
FROM web_events
GROUP BY 1,2

--I can now average for the entire time period

SELECT AVG("count of use")
FROM (SELECT DATE_TRUNC ('day', occurred_at) AS "day of use", channel, COUNT(channel) "count of use"
		FROM web_events
		GROUP BY 1,2) "sub query table"

--But the above query is not the result we need, our output should give average per channel, so we need to group by channel

SELECT channel, AVG("count of use")
FROM (SELECT DATE_TRUNC ('day', occurred_at) AS "day of use", channel, COUNT(channel) "count of use"
		FROM web_events
		GROUP BY 1,2) "sub query table"
GROUP BY 1

Experience 2: Query the average of each type of paper in the first month in which order was made
First, lets get the first month in which order was made.

--The First month in which order was made

SELECT DATE_TRUNC('month', MIN(occurred_at)) AS first_order_month
FROM orders

--Since we know the Earliest month an order was placed to be '2013-12-01'
--Then let us find the AVG grouping by month and filter for that month

SELECT DATE_TRUNC('month', occurred_at) AS order_month, AVG(standard_qty) AS standard_paper_average,
	AVG(poster_qty) AS poster_paper_average, AVG(gloss_qty) AS gloss_paper_average
FROM orders
WHERE DATE_TRUNC('month', occurred_at) = '2013-12-01'
GROUP BY 1

--If you agree to the query above, then you should agree to the next one below

SELECT DATE_TRUNC('month', occurred_at) AS order_month, AVG(standard_qty) AS standard_paper_average,
	AVG(poster_qty) AS poster_paper_average, AVG(gloss_qty) AS gloss_paper_average
FROM orders
WHERE DATE_TRUNC('month', occurred_at) = (SELECT DATE_TRUNC('month', MIN(occurred_at)) AS first_order_month
					FROM orders)
GROUP BY 1	

--Instructors code for comparison

SELECT AVG(standard_qty) avg_std, AVG(gloss_qty) avg_gls, AVG(poster_qty) avg_pst
FROM orders
WHERE DATE_TRUNC('month', occurred_at) = 
     (SELECT DATE_TRUNC('month', MIN(occurred_at)) FROM orders);

Going through the subquery mania.

Before we start the Mania questions, let’s take a look at our ERD again
 
Question ONE
Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.
Notice: The first time I read this, I thought of it was a MAX related question, but it turns out it was a SUM that was intended.
Maybe, if it read.
Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales in a single order. 
This would have been very definitive of a MAX type of question.
However, we will look at both scenarios.
Scenario 1.
Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.

--First let us first decide how many tables do we need to join that is sufficient to solve the problem
--The total_amt_usd is in the orders table, then we have the sales_reps table and the region table
--The sales reps table is not directly connected to our orders table, so we need to bring in our accounts table as a bridge

SELECT *
FROM sales_reps s
JOIN region r ON r.id=s.region_id
JOIN accounts a ON a.sales_rep_id=s.id
JOIN orders o ON o.account_id=a.id

--You miight be tempted to write the query below

SELECT s.name, r.name, MAX(SUM(total_amt_usd))
FROM sales_reps s
JOIN region r ON r.id=s.region_id
JOIN accounts a ON a.sales_rep_id=s.id
JOIN orders o ON o.account_id=a.id
GROUP BY 1,2

--The above query will not run because SQL (at least PostgreSQL) does not allow nested aggregations
--You can also think this way, but you must group with all non-agreegate column in the SELECT statement.
--When you hit dead ends like this, you should start thinking sub queries

SELECT s.name, region_name, MAX(sub.total_sales_rep_sales)
FROM (SELECT s.name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
	FROM sales_reps s
	JOIN region r ON r.id=s.region_id
	JOIN accounts a ON a.sales_rep_id=s.id
	JOIN orders o ON o.account_id=a.id
	GROUP BY 1,2) sub
GROUP BY 1

--Thinking around what we need,
--First we need to be able to find the total sales made by each sales rep in each region

SELECT s.name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
	FROM sales_reps s
	JOIN region r ON r.id=s.region_id
	JOIN accounts a ON a.sales_rep_id=s.id
	JOIN orders o ON o.account_id=a.id
	GROUP BY 1,2

--We must find a way to order this new table by region and find the maximum

SELECT region_name, MAX(total_sales_rep_sales)
FROM (SELECT s.name AS sales_rep_name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
	FROM sales_reps s
	JOIN region r ON r.id=s.region_id
	JOIN accounts a ON a.sales_rep_id=s.id
	JOIN orders o ON o.account_id=a.id
	GROUP BY 1,2
) sub
GROUP BY region_name

--This makes our subquery, it returns a list of the maximum sales for each region and it corresponds to a particular sales rep
--To find that sales rep

SELECT s.name AS sales_rep_name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
	FROM sales_reps s
	JOIN region r ON r.id=s.region_id
	JOIN accounts a ON a.sales_rep_id=s.id
	JOIN orders o ON o.account_id=a.id
	GROUP BY 1,2
	HAVING SUM(o.total_amt_usd) IN (675637.19, 1098137.72, 886244.12, 1010690.60)

--If you agree to the above query, then you should accept the query below

SELECT s.name AS sales_rep_name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
	FROM sales_reps s
	JOIN region r ON r.id=s.region_id
	JOIN accounts a ON a.sales_rep_id=s.id
	JOIN orders o ON o.account_id=a.id
	GROUP BY 1,2
	HAVING (r.name, SUM(o.total_amt_usd)) IN (SELECT region_name, MAX(total_sales_rep_sales)
						FROM (SELECT s.name AS sales_rep_name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
							FROM sales_reps s
							JOIN region r ON r.id=s.region_id
							JOIN accounts a ON a.sales_rep_id=s.id
							JOIN orders o ON o.account_id=a.id
							GROUP BY 1,2) sub
								GROUP BY region_name)	

Note this is an updated version from the class feedback, and code is now fool proof.						
--Instructor's code for comparison

SELECT t3.rep_name, t3.region_name, t3.total_amt
FROM(SELECT region_name, MAX(total_amt) total_amt
     FROM(SELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt
             FROM sales_reps s
             JOIN accounts a
             ON a.sales_rep_id = s.id
             JOIN orders o
             ON o.account_id = a.id
             JOIN region r
             ON r.id = s.region_id
             GROUP BY 1, 2) t1
     GROUP BY 1) t2
JOIN (SELECT s.name rep_name, r.name region_name, SUM(o.total_amt_usd) total_amt
     FROM sales_reps s
     JOIN accounts a
     ON a.sales_rep_id = s.id
     JOIN orders o
     ON o.account_id = a.id
     JOIN region r
     ON r.id = s.region_id
     GROUP BY 1,2
     ORDER BY 3 DESC) t3
ON t3.region_name = t2.region_name AND t3.total_amt = t2.total_amt;

Using the same method as above,
Solve Scenario 2.
Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales in a single order. 
Question TWO
For the region with the largest (sum) of sales total_amt_usd, how many total (count) orders were placed?

--For the region with the largest (sum) of sales total_amt_usd, how many total (count) orders were placed?

SELECT r.name r_name, SUM(total_amt_usd) sum_usd, COUNT(total) count_order 
FROM sales_reps s
JOIN accounts a ON s.id=a.sales_rep_id
JOIN orders o ON o.account_id=a.id
JOIN region r ON r.id=s.region_id
GROUP BY r.name
HAVING SUM(total_amt_usd)=
			(SELECT max(sum_usd)
			FROM (SELECT r.name r_name, SUM(total_amt_usd) sum_usd, COUNT(total) count_order 
				FROM sales_reps s
				JOIN accounts a ON s.id=a.sales_rep_id
				JOIN orders o ON o.account_id=a.id
				JOIN region r ON r.id=s.region_id
				GROUP BY r.name) sub)

--This can be further simplified by leveraging order by and limit 1

SELECT r.name r_name, SUM(total_amt_usd) sum_usd, COUNT(total) count_order 
FROM sales_reps s
JOIN accounts a ON s.id=a.sales_rep_id
JOIN orders o ON o.account_id=a.id
JOIN region r ON r.id=s.region_id
GROUP BY r.name
HAVING SUM(total_amt_usd)=
							(SELECT  SUM(total_amt_usd) sum_usd
								FROM sales_reps s
								JOIN accounts a ON s.id=a.sales_rep_id
								JOIN orders o ON o.account_id=a.id
								JOIN region r ON r.id=s.region_id
								GROUP BY r.name
								ORDER BY COUNT(total) DESC
								LIMIT 1)

--Instructors code for comparision

SELECT r.name, COUNT(o.total) total_orders
FROM sales_reps s
SELECT r.name, COUNT(o.total) total_orders
FROM sales_reps s
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON o.account_id = a.id
JOIN region r
ON r.id = s.region_id
GROUP BY r.name
HAVING SUM(o.total_amt_usd) = (
      SELECT MAX(total_amt)
      FROM (SELECT r.name region_name, SUM(o.total_amt_usd) total_amt
              FROM sales_reps s
              JOIN accounts a
              ON a.sales_rep_id = s.id
              JOIN orders o
              ON o.account_id = a.id
              JOIN region r
              ON r.id = s.region_id
              GROUP BY r.name) sub);

Question THREE
How many accounts had more total purchases than the account name which has bought the most standard_qty paper throughout their lifetime as a customer?
SELECT COUNT(*)
FROM
	(SELECT a.id,  SUM(total)
	FROM orders o
	JOIN accounts a
	ON o.account_id=a.id
	GROUP BY 1
	HAVING SUM(total) > 
		(SELECT SUM(total) FROM orders GROUP BY account_id
		HAVING SUM(standard_qty) = (SELECT MAX(qty) 
 						FROM (SELECT account_id,SUM(standard_qty) qty 
							FROM orders GROUP BY 1)sub)))sub_1
							
--Instructor's code for comparison

SELECT COUNT(*)
FROM (SELECT a.name
       FROM orders o
       JOIN accounts a
       ON a.id = o.account_id
       GROUP BY 1
       HAVING SUM(o.total) > (SELECT total 
                   FROM (SELECT a.name act_name, SUM(o.standard_qty) tot_std, SUM(o.total) total
                         FROM accounts a
                         JOIN orders o
                         ON o.account_id = a.id
                         GROUP BY 1
                         ORDER BY 2 DESC
                         LIMIT 1) inner_tab)
             ) counter_tab;

Question FOUR
For the customer that spent the most (in total over their lifetime as a customer) total_amt_usd, how many web_events did they have for each channel?

--Instructor's code

SELECT a.name, w.channel, COUNT(*)
FROM accounts a
JOIN web_events w
ON a.id = w.account_id AND a.id =  (SELECT id
                     FROM (SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent
                           FROM orders o
                           JOIN accounts a
                           ON a.id = o.account_id
                           GROUP BY a.id, a.name
                           ORDER BY 3 DESC
                           LIMIT 1) inner_table)
GROUP BY 1, 2
ORDER BY 3 DESC;	

--A not too efficient version, but does the job and encourages alternate thinking

SELECT a.name,w.channel, COUNT(channel)
FROM accounts a
JOIN web_events w
ON w.account_id = a.id
GROUP BY 1,a.id,2
HAVING a.id = 
			(SELECT account_id					   
			FROM orders
			GROUP BY account_id	
			HAVING SUM(total_amt_usd)= (SELECT MAX(spent) 
					FROM (SELECT account_id, SUM(total_amt_usd) spent 
					 FROM orders GROUP BY account_id)sub))
ORDER BY 3 DESC

Question FIVE
What is the lifetime average amount spent in terms of total_amt_usd for the top 10 total spending accounts?

--Instructor's code

SELECT AVG(tot_spent)
FROM (SELECT a.id, a.name, SUM(o.total_amt_usd) tot_spent
      FROM orders o
      JOIN accounts a
      ON a.id = o.account_id
      GROUP BY a.id, a.name
      ORDER BY 3 DESC
       LIMIT 10) temp;
	   
--Just one syntax change and leveraging id

SELECT AVG (sum_up)
FROM (SELECT account_id, SUM(total_amt_usd) sum_up
		FROM orders
		GROUP BY 1
		ORDER BY 2 desc
		FETCH FIRST 10 ROWS ONLY) sub
Question SIX
What is the lifetime average amount spent in terms of total_amt_usd, including only the companies that spent more per order, on average, than the average of all orders.
SELECT AVG(avg_amt)
FROM (SELECT o.account_id, AVG(o.total_amt_usd) avg_amt
    FROM orders o
    GROUP BY 1
    HAVING AVG(o.total_amt_usd) > (SELECT AVG(o.total_amt_usd) avg_all
                                   FROM orders o)) temp_table;

The WITH statement
The WITH statement is a common table expression. It returns a table or value or list of values. It is majorly a performance optimization tool.

The WITH statement must be ran with it’s parent query, else running it alone, will return an error.

WITH CTE_AVG AS (

SELECT o.account_id, AVG(o.total_amt_usd) avg_amt
    FROM orders o
    GROUP BY 1
    HAVING AVG(o.total_amt_usd) > (SELECT AVG(o.total_amt_usd) avg_all
                                   FROM orders o)
)

SELECT AVG (avg_amt)
FROM CTE_AVG

The general syntax is
WITH table1 AS (
          SELECT *
          FROM web_events),

     table2 AS (
          SELECT *
          FROM accounts)

SELECT *
FROM table1
JOIN table2
ON table1.account_id = table2.id;

--Converting question 1 solution to CTE
Solution recopied for ease of reference.
SELECT s.name AS sales_rep_name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
	FROM sales_reps s
	JOIN region r ON r.id=s.region_id
	JOIN accounts a ON a.sales_rep_id=s.id
	JOIN orders o ON o.account_id=a.id
	GROUP BY 1,2
	HAVING (r.name, SUM(o.total_amt_usd)) IN (SELECT region_name, MAX(total_sales_rep_sales)
FROM (SELECT s.name AS sales_rep_name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
							FROM sales_reps s
							JOIN region r ON r.id=s.region_id
							JOIN accounts a ON a.sales_rep_id=s.id
							JOIN orders o ON o.account_id=a.id
							GROUP BY 1,2) sub
								GROUP BY region_name)
Note that in the CTE version below, I have grouped the entire part below, as a common table expression. This simplifies my code greatly.
Also take note of the HAVING from above, changing to WHERE below.
This is because SQL is seeing the CTE as a table on its own and aggregate function is not transferred.
SELECT s.name AS sales_rep_name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
	FROM sales_reps s
	JOIN region r ON r.id=s.region_id
	JOIN accounts a ON a.sales_rep_id=s.id
	JOIN orders o ON o.account_id=a.id
	GROUP BY 1,2
__________________________________________________________________________________________
WITH repeated_table AS (
	SELECT s.name AS sales_rep_name,r.name AS region_name, SUM(o.total_amt_usd) AS total_sales_rep_sales
	FROM sales_reps s
	JOIN region r ON r.id=s.region_id
	JOIN accounts a ON a.sales_rep_id=s.id
	JOIN orders o ON o.account_id=a.id
	GROUP BY 1,2
)

SELECT sales_rep_name,region_name, total_sales_rep_sales
	FROM repeated_table
	WHERE (region_name,total_sales_rep_sales) IN (SELECT region_name, MAX(total_sales_rep_sales)
					FROM repeated_table
					GROUP BY region_name)
____________________________________________________________________________________________________ 
