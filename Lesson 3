Quiz 1

Find the total amount of poster_qty paper ordered in the orders table.

SELECT SUM(poster_qty) 
FROM orders;      

Find the total amount of standard_qty paper ordered in the orders table.

SELECT sum(standard_qty) 
FROM orders;
                      
Find the total dollar amount of sales using the total_amt_usd in the orders table.

SELECT SUM(total_amt_usd) 
from orders;

Find the total amount spent on standard_amt_usd and gloss_amt_usd paper for each order in the orders table. This should give a dollar amount for each order in the table.

SELECT standard_amt_usd+gloss_amt_usd AS gloss&standard
FROM orders;

Find the standard_amt_usd per unit of standard_qty paper. Your solution should use both an aggregation and a mathematical operator.

SELECT SUM(standard_amt_usd)/SUM(standard_qty) AS average_standard
from orders;

Quiz 2

When was the earliest order ever placed? You only need to return the date.

SELECT MIN(occurred_at) 
FROM orders;

Try performing the same query as in question 1 without using an aggregation function.

SELECT occurred_at 
FROM orders
ORDER BY occurred_at asc
LIMIT 1;

When did the most recent (latest) web_event occur?

SELECT MAX(occurred_at) 
FROM orders;

Try to perform the result of the previous query without using an aggregation function.

SELECT occurred_at 
FROM orders
ORDER BY occurred_at DESC
LIMIT 1;

Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order. Your final answer should have 6 values - one for each paper type for the average number of sales, as well as the average amount.

SELECT AVG(standard_qty) mean_standard, AVG(gloss_qty) mean_gloss, 
           AVG(poster_qty) mean_poster, AVG(standard_amt_usd) mean_standard_usd, 
           AVG(gloss_amt_usd) mean_gloss_usd, AVG(poster_amt_usd) mean_poster_usd
FROM orders;

Via the video, you might be interested in how to calculate the MEDIAN. Though this is more advanced than what we have covered so far try finding - what is the MEDIAN total_usd spent on all orders?

SELECT PERECENTILE_CONT(0.5) WITHIN GROUP (ORDER BY total_amt_usd) FROM orders;

Instructors code:

SELECT *
FROM (SELECT total_amt_usd
      FROM orders
      ORDER BY total_amt_usd
      LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;



Quiz 3

Which account (by name) placed the earliest order? Your solution should have the account name and the date of the order.

SELECT a.name, MIN (o.occurred_at) 
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.name
ORDER BY min(occurred_at) ASC
LIMIT 1;

Find the total sales in usd for each account. You should include two columns - the total sales for each company's orders in usd and the company name.

select a.name, SUM (o.total_amt_usd) 
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.name
ORDER BY SUM(o.total_amt_usd);

Find the total number of times each type of channel from the web_events was used. Your final table should have two columns - the channel and the number of times the channel was used.

SELECT channel, count(*) 
FROM web_events
GROUP BY channel;

Who was the primary contact associated with the earliest web_event?

SELECT a.primary_poc 
FROM web_events w
JOIN accounts a 
ON a.id=w.account_id
GROUP BY a.primary_poc
ORDER BY min(w.occurred_at)
LIMIT 1;

What was the smallest order placed by each account in terms of total usd. Provide only two columns - the account name and the total usd. Order from smallest dollar amounts to largest.

SELECT a.name, MIN (o.total_amt_usd) 
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.name
ORDER BY MIN(o.total_amt_usd)
LIMIT 1;

Via what channel did the most recent (latest) web_event occur, which account was associated with this web_event? Your query should return only three values - the date, channel, and account name.

SELECT a.name, w.channel, MAX(w.occurred_at) 
FROM web_events w
JOIN accounts a 
ON a.id=w.account_id
GROUP BY w.channel,a.name
ORDER BY MAX(w.occurred_at)
LIMIT 1;

Find the number of sales reps in each region. Your final table should have two columns - the region and the number of sales_reps. Order from fewest reps to most reps.

SELECT r.name, COUNT(*)
FROM region r
JOIN sales_reps s
ON r.id=s.region_id
GROUP BY 1
ORDER BY 2

Quiz 4


For each account, determine the average amount of each type of paper they purchased across their orders. Your result should have four columns - one for the account name and one for the average quantity purchased for each of the paper types for each account.

SELECT a.name, AVG(o.standard_qty) average_std, AVG(o.gloss_qty) average_gloss, avg(o.poster_qty) average_poster
FROM orders o
JOIN accounts a
ON a.id=o.account_id
GROUP BY a.name;

For each account, determine the average amount spent per order on each paper type. Your result should have four columns - one for the account name and one for the average amount spent on each paper type.

SELECT a.name, AVG(o.standard_amt_usd) average_std, AVG(o.gloss_amt_usd) average_gloss, avg(o.poster_amt_usd) average_poster
FROM orders o
JOIN accounts a
ON a.id=o.account_id
GROUP BY a.name;

Determine the number of times a particular channel was used in the web_events table for each sales rep. Your final table should have three columns - the name of the sales rep, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

SELECT s.name, w.channel, COUNT(w.channel)
FROM sales_reps s
JOIN accounts a
ON a.sales_rep_id=s.id
JOIN web_events w 
ON w.account_id=a.id
GROUP BY s.name,w.channel
ORDER BY s.name DESC, COUNT(w.channel) asc;

Determine the number of times a particular channel was used in the web_events table for each region. Your final table should have three columns - the region name, the channel, and the number of occurrences. Order your table with the highest number of occurrences first.

SELECT r.name, w.channel, COUNT(w.channel)
FROM region r
JOIN sales_reps s
ON r.id=s.region_id
JOIN accounts a
ON a.sales_rep_id=s.id
JOIN web_events w 
ON w.account_id=a.id
GROUP BY r.name, w.channel

Quiz 5

Use DISTINCT to test if there are any accounts associated with more than one region.

SELECT DISTINCT a.name, r.name
FROM accounts a
JOIN sales_reps s
ON a.sales_rep_id=s.id
JOIN region r
ON r.id=s.region_id

SELECT DISTINCT name
FROM accounts

Since same number of rows was returned, each account has only 1 region associated with them

Have any sales reps worked on more than one account?

SELECT DISTINCT a.name, s.name
FROM accounts a
JOIN sales_reps s
ON a.sales_rep_id=s.id


SELECT DISTINCT name
FROM sales_reps

Since there is difference in number of rows returned, yes, some sales rep handle more than 1 accounts

Quiz 6

How many of the sales reps have more than 5 accounts that they manage?

SELECT COUNT(*)
FROM(SELECT s.name, COUNT(a.id)
	FROM sales_reps s
	JOIN accounts a
	ON a.sales_rep_id=s.id
	GROUP BY 1
	HAVING COUNT(a.id)>5
	)sub

How many accounts have more than 20 orders?

SELECT COUNT(*)
FROM(SELECT a.name, COUNT(o.account_id)
	FROM accounts a
	JOIN orders o
	ON o.account_id = a.id
	GROUP BY 1
	HAVING COUNT(o.account_id) > 20) sub

Which account has the most orders?

SELECT a.id, a.name, COUNT(o.id)
FROM accounts a
JOIN orders o
ON o.account_id = a.id
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 1


Which accounts spent more than 30,000 usd total across all orders?

SELECT a.name, SUM(total_amt_usd)
FROM accounts a
JOIN orders o
ON a.id=o.account_id
GROUP BY 1
HAVING SUM(total_amt_usd) > 30000
ORDER BY 2 DESC

Which accounts spent less than 1,000 usd total across all orders?

SELECT a.name, SUM(total_amt_usd)
FROM accounts a
JOIN orders o
ON a.id=o.account_id
GROUP BY 1
HAVING SUM(total_amt_usd) < 1000
ORDER BY 2 DESC

Which account has spent the most with us?

SELECT a.name, SUM(total_amt_usd)
FROM accounts a
JOIN orders o
ON a.id=o.account_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1

Which account has spent the least with us?

SELECT a.name, SUM(total_amt_usd)
FROM accounts a
JOIN orders o
ON a.id=o.account_id
GROUP BY 1
ORDER BY 2 
LIMIT 1

Which accounts used facebook as a channel to contact customers more than 6 times?

SELECT a.name, count(channel)
FROM accounts a
JOIN web_events w
ON w.account_id=a.id AND channel = 'facebook'
GROUP BY 1
HAVING COUNT(channel) > 6
ORDER BY 2  

Which account used facebook most as a channel?

SELECT a.name, count(channel)
FROM accounts a
JOIN web_events w
ON w.account_id=a.id AND channel = 'facebook'
GROUP BY 1
HAVING COUNT(channel) > 6
ORDER BY 2 DESC
LIMIT 1

Which channel was most frequently used by most accounts?

SELECT channel, COUNT(a.name)
FROM accounts a
JOIN web_events w
ON w.account_id=a.id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1


